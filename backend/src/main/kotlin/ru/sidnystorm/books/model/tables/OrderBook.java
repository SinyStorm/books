/*
 * This file is generated by jOOQ.
 */
package ru.sidnystorm.books.model.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import ru.sidnystorm.books.model.Indexes;
import ru.sidnystorm.books.model.Keys;
import ru.sidnystorm.books.model.Public;
import ru.sidnystorm.books.model.tables.records.OrderBookRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderBook extends TableImpl<OrderBookRecord> {

    private static final long serialVersionUID = 612841732;

    /**
     * The reference instance of <code>public.order_book</code>
     */
    public static final OrderBook ORDER_BOOK = new OrderBook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderBookRecord> getRecordType() {
        return OrderBookRecord.class;
    }

    /**
     * The column <code>public.order_book.id</code>.
     */
    public final TableField<OrderBookRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('order_book_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.order_book.order</code>.
     */
    public final TableField<OrderBookRecord, Integer> ORDER = createField("order", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.order_book.book</code>.
     */
    public final TableField<OrderBookRecord, Integer> BOOK = createField("book", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.order_book.count</code>.
     */
    public final TableField<OrderBookRecord, Integer> COUNT = createField("count", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.order_book</code> table reference
     */
    public OrderBook() {
        this(DSL.name("order_book"), null);
    }

    /**
     * Create an aliased <code>public.order_book</code> table reference
     */
    public OrderBook(String alias) {
        this(DSL.name(alias), ORDER_BOOK);
    }

    /**
     * Create an aliased <code>public.order_book</code> table reference
     */
    public OrderBook(Name alias) {
        this(alias, ORDER_BOOK);
    }

    private OrderBook(Name alias, Table<OrderBookRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderBook(Name alias, Table<OrderBookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OrderBook(Table<O> child, ForeignKey<O, OrderBookRecord> key) {
        super(child, key, ORDER_BOOK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDER_BOOK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrderBookRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ORDER_BOOK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrderBookRecord> getPrimaryKey() {
        return Keys.ORDER_BOOK_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrderBookRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderBookRecord>>asList(Keys.ORDER_BOOK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OrderBookRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrderBookRecord, ?>>asList(Keys.ORDER_BOOK__ORDER_BOOK_OORDER);
    }

    public Order order() {
        return new Order(this, Keys.ORDER_BOOK__ORDER_BOOK_OORDER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderBook as(String alias) {
        return new OrderBook(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderBook as(Name alias) {
        return new OrderBook(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderBook rename(String name) {
        return new OrderBook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderBook rename(Name name) {
        return new OrderBook(name, null);
    }
}
