/*
 * This file is generated by jOOQ.
 */
package ru.sidnystorm.books.model.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import ru.sidnystorm.books.model.Indexes;
import ru.sidnystorm.books.model.Keys;
import ru.sidnystorm.books.model.Public;
import ru.sidnystorm.books.model.tables.records.BookBinomRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookBinom extends TableImpl<BookBinomRecord> {

    private static final long serialVersionUID = 1833288796;

    /**
     * The reference instance of <code>public.book_binom</code>
     */
    public static final BookBinom BOOK_BINOM = new BookBinom();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookBinomRecord> getRecordType() {
        return BookBinomRecord.class;
    }

    /**
     * The column <code>public.book_binom.id</code>.
     */
    public final TableField<BookBinomRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('book_binom_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.book_binom.author</code>.
     */
    public final TableField<BookBinomRecord, String> AUTHOR = createField("author", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.book_binom.name</code>.
     */
    public final TableField<BookBinomRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.book_binom.grade</code>.
     */
    public final TableField<BookBinomRecord, String> GRADE = createField("grade", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.book_binom.price</code>.
     */
    public final TableField<BookBinomRecord, Double> PRICE = createField("price", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>public.book_binom</code> table reference
     */
    public BookBinom() {
        this(DSL.name("book_binom"), null);
    }

    /**
     * Create an aliased <code>public.book_binom</code> table reference
     */
    public BookBinom(String alias) {
        this(DSL.name(alias), BOOK_BINOM);
    }

    /**
     * Create an aliased <code>public.book_binom</code> table reference
     */
    public BookBinom(Name alias) {
        this(alias, BOOK_BINOM);
    }

    private BookBinom(Name alias, Table<BookBinomRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookBinom(Name alias, Table<BookBinomRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BookBinom(Table<O> child, ForeignKey<O, BookBinomRecord> key) {
        super(child, key, BOOK_BINOM);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BOOK_BINOM_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BookBinomRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BOOK_BINOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BookBinomRecord> getPrimaryKey() {
        return Keys.BOOK_BINOM_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BookBinomRecord>> getKeys() {
        return Arrays.<UniqueKey<BookBinomRecord>>asList(Keys.BOOK_BINOM_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BookBinom as(String alias) {
        return new BookBinom(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BookBinom as(Name alias) {
        return new BookBinom(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookBinom rename(String name) {
        return new BookBinom(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookBinom rename(Name name) {
        return new BookBinom(name, null);
    }
}
