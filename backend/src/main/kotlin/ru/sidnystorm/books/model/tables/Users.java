/*
 * This file is generated by jOOQ.
 */
package ru.sidnystorm.books.model.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import ru.sidnystorm.books.model.Indexes;
import ru.sidnystorm.books.model.Keys;
import ru.sidnystorm.books.model.Public;
import ru.sidnystorm.books.model.enums.Role;
import ru.sidnystorm.books.model.tables.records.UsersRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 1051199795;

    /**
     * The reference instance of <code>public.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>public.users.id</code>.
     */
    public final TableField<UsersRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('users_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.users.login</code>.
     */
    public final TableField<UsersRecord, String> LOGIN = createField("login", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.users.password</code>.
     */
    public final TableField<UsersRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.CHAR(60).nullable(false), this, "");

    /**
     * The column <code>public.users.role</code>.
     */
    public final TableField<UsersRecord, Role> ROLE = createField("role", org.jooq.impl.SQLDataType.VARCHAR.defaultValue(DSL.field("'USER'::role", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(Role.class), this, "");

    /**
     * The column <code>public.users.name</code>.
     */
    public final TableField<UsersRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users.address</code>.
     */
    public final TableField<UsersRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users.inn</code>.
     */
    public final TableField<UsersRecord, String> INN = createField("inn", org.jooq.impl.SQLDataType.CHAR(10), this, "");

    /**
     * The column <code>public.users.kpp</code>.
     */
    public final TableField<UsersRecord, String> KPP = createField("kpp", org.jooq.impl.SQLDataType.CHAR(9), this, "");

    /**
     * The column <code>public.users.ogrn</code>.
     */
    public final TableField<UsersRecord, String> OGRN = createField("ogrn", org.jooq.impl.SQLDataType.CHAR(13), this, "");

    /**
     * The column <code>public.users.okpo</code>.
     */
    public final TableField<UsersRecord, String> OKPO = createField("okpo", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.users.bank</code>.
     */
    public final TableField<UsersRecord, String> BANK = createField("bank", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users.bik</code>.
     */
    public final TableField<UsersRecord, String> BIK = createField("bik", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users.bank_address</code>.
     */
    public final TableField<UsersRecord, String> BANK_ADDRESS = createField("bank_address", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users.checking_account</code>.
     */
    public final TableField<UsersRecord, String> CHECKING_ACCOUNT = createField("checking_account", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users.correspondent_account</code>.
     */
    public final TableField<UsersRecord, String> CORRESPONDENT_ACCOUNT = createField("correspondent_account", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users.phone</code>.
     */
    public final TableField<UsersRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users.email</code>.
     */
    public final TableField<UsersRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users.manager</code>.
     */
    public final TableField<UsersRecord, Integer> MANAGER = createField("manager", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Users(Table<O> child, ForeignKey<O, UsersRecord> key) {
        super(child, key, USERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERS_LOGIN_KEY, Indexes.USERS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UsersRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.USERS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsersRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersRecord>>asList(Keys.USERS_PKEY, Keys.USERS_LOGIN_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UsersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsersRecord, ?>>asList(Keys.USERS__USERS_MANAGER);
    }

    public Manager manager() {
        return new Manager(this, Keys.USERS__USERS_MANAGER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }
}
